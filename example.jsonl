{"prompt": "> ../workshop/tests/conftest.py\nimport pytest\n\nfrom bank.bank import Bank, Account\n\n\n@pytest.fixture(\n    name=\"bank\"\n)\ndef make_bank():\n    return Bank()\n\n\n@pytest.fixture(\n    name=\"account\"\n)\ndef make_account(\n        bank\n):\n    return Account(\n        name=\"Richard\",\n        bank=bank\n    )\n\n> ../workshop/tests/test_interest.py\nimport pytest\n\nfrom bank.bank import StudentAccount, Account\n\n\n@pytest.mark.parametrize(\n    \"initial, interest, final\",\n    [\n        (10, 0.1, 11),\n        (-10, 0.1, -11),\n        (-20, 0.1, -22),\n    ]\n)\ndef test_pay_interest(\n        account,\n        bank,\n        initial,\n        interest,\n        final\n):\n    account.overdraft_limit = 20\n    account.balance = initial\n    bank.interest_rate = interest\n\n    account.step()\n\n    assert account.balance == final\n\n\ndef test_pay_all(\n        account,\n        bank\n):\n    account_2 = Account(\n        name=\"Second\",\n        bank=bank\n    )\n\n    account.balance = 10\n    account_2.balance = 20\n\n    bank.step()\n\n    assert account.balance == 11\n    assert account_2.balance == 22\n\n\n@pytest.mark.parametrize(\n    \"initial, final\",\n    [\n        (-10, -10),\n        (-5, -5),\n        (10, 11)\n    ]\n)\ndef test_student_account(\n        bank,\n        initial,\n        final\n):\n    account = StudentAccount(\n        \"Guy Young\",\n        bank=bank\n    )\n\n    account._balance = initial\n    account.step()\n\n    assert account._balance == final\n\n> ../workshop/tests/__init__.py\n\n> ../workshop/tests/test_account.py\nimport pytest\n\nfrom bank.bank import AccountException\n\n\ndef test_open_account(\n        account\n):\n    assert account.name == \"Richard\"\n\n\ndef test_make_deposit(\n        account\n):\n    account.make_deposit(\n        100\n    )\n    assert account.balance == 100\n\n\ndef test_make_withdrawal(\n        account\n):\n    account.balance = 100\n    account.make_withdrawal(\n        20\n    )\n    assert account.balance == 80\n\n\ndef test_make_bad_withdrawal(\n        account\n):\n    account.balance = 10\n    with pytest.raises(\n            AccountException\n    ):\n        account.make_withdrawal(20)\n\n    assert account.balance == 10\n\n\ndef test_overdraft_limit(\n        account\n):\n    account.overdraft_limit = 10\n\n    assert account.available_funds == 10\n\n\n@pytest.mark.parametrize(\n    \"limit, withdrawal, balance, funds\",\n    [\n        (10, 10, -10, 0),\n        (10, 5, -5, 5),\n        (20, 5, -5, 15),\n    ]\n)\ndef test_withdrawal(\n        account,\n        limit,\n        withdrawal,\n        balance,\n        funds\n):\n    account.overdraft_limit = limit\n    account.make_withdrawal(withdrawal)\n\n    assert account.balance == balance\n    assert account.available_funds == funds\n\n\ndef test_set_balance(\n        account\n):\n    with pytest.raises(\n            AccountException\n    ):\n        account.balance = -10\n\n\ndef test_deposit_below_limit(\n        account\n):\n    account._balance = -10\n    account.make_deposit(5)\n\n    assert account.balance == -5\n\n", "completion": "> ../workshop/bank/__init__.py\n\n> ../workshop/bank/bank.py\nclass AccountException(Exception):\n    pass\n\n\nclass Account:\n    def __init__(\n            self,\n            name,\n            bank\n    ):\n        bank.accounts.append(\n            self\n        )\n\n        self.name = name\n        self._balance = 0\n        self.overdraft_limit = 0\n        self.bank = bank\n\n    def step(self):\n        self._balance *= (1 + self.bank.interest_rate)\n\n    @property\n    def balance(self):\n        return self._balance\n\n    @balance.setter\n    def balance(self, balance):\n        if balance < -self.overdraft_limit:\n            raise AccountException(\n                f\"Negative balance {balance} is not allowed\"\n            )\n        self._balance = balance\n\n    @property\n    def available_funds(self):\n        return self.overdraft_limit + self.balance\n\n    def make_deposit(self, amount):\n        self._balance += amount\n\n    def make_withdrawal(self, amount):\n        self.balance -= amount\n\n\nclass StudentAccount(Account):\n    def step(self):\n        if self.balance > 0:\n            super().step()\n\n\nclass Bank:\n    def __init__(\n            self,\n            interest_rate=0.1\n    ):\n        self.interest_rate = interest_rate\n        self.accounts = list()\n\n    def step(self):\n        for account in self.accounts:\n            account.step()\n\n"}
